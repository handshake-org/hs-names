#!/usr/bin/env node

'use strict';

/* eslint quotes: off */

const assert = require('assert');
const Path = require('path');
const fs = require('bfile');
const {Resource} = require('hsd/lib/dns/resource');
const util = require('./util');

const ZONE_JSON = Path.resolve(__dirname, 'build', 'root.json');
const TLD_H = Path.resolve(__dirname, 'build', 'tld.h');

function prepend(data) {
  assert(data.length <= 512);

  const out = Buffer.allocUnsafe(2 + data.length);

  out.writeUInt16LE(data.length, 0);
  data.copy(out, 2);

  return out;
}

function toHex(data) {
  const hex = prepend(data).toString('hex');
  const chunks = [];

  for (let i = 0; i < hex.length; i += 26)
    chunks.push(`  "${hex.slice(i, i + 26)}"`);

  const str = chunks.join('\n');
  const cstr = str.replace(/([a-f0-9]{2})/g, '\\x$1');

  return `${cstr},`;
}

const json = fs.readFileSync(ZONE_JSON, 'utf8');
const root = JSON.parse(json);
const keys = Object.keys(root).sort(util.compare);
const items = [];

for (const key of keys) {
  const res = Resource.fromJSON(root[key]);
  const blob = res.encode();

  assert(blob.length <= 512);

  items.push([key.slice(0, -1), blob]);
}

{
  const code = [
    '#ifndef _HSK_TLD_H',
    '#define _HSK_TLD_H',
    '',
    '/* Autogenerated, do not edit. */',
    '',
    `#define HSK_TLD_SIZE ${keys.length}`,
    '',
    'static const char *HSK_TLD_NAMES[] = {'
  ];

  for (const [name] of items)
    code.push(`  "${name}",`);

  code.push('  NULL');
  code.push('};');
  code.push('');
  code.push('static const char *HSK_TLD_DATA[] = {');

  for (const [, blob] of items)
    code.push(toHex(blob));

  code.push('  NULL');
  code.push('};');
  code.push('');
  code.push('#endif');
  code.push('');

  fs.writeFileSync(TLD_H, code.join('\n'));
}
